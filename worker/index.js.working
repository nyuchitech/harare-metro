// TEMPORARY DEBUG VERSION - Replace your worker/index.js with this to test

import { XMLParser } from 'fast-xml-parser'

// RSS feed sources for Zimbabwe news
const RSS_SOURCES = [
  {
    name: 'Herald Zimbabwe',
    url: 'https://www.herald.co.zw/feed/',
    category: 'general',
    enabled: true
  },
  {
    name: 'NewsDay Zimbabwe', 
    url: 'https://www.newsday.co.zw/feed/',
    category: 'general',
    enabled: true
  },
  {
    name: 'ZBC News',
    url: 'https://www.zbc.co.zw/feed/',
    category: 'news',
    enabled: true
  }
]

export default {
  async fetch(request, env, ctx) {
    const url = new URL(request.url)
    console.log('Request:', url.pathname)
    
    try {
      // Handle API routes first
      if (url.pathname.startsWith('/api/')) {
        console.log('Handling API request:', url.pathname)
        return await handleApiRequest(request, env, ctx)
      }

      // For now, return a simple HTML page for non-API routes
      return new Response(`
        <!DOCTYPE html>
        <html>
        <head>
          <title>Harare Metro - Debug</title>
        </head>
        <body>
          <h1>Harare Metro Worker is Running!</h1>
          <p>Worker is working correctly.</p>
          <h2>Test API:</h2>
          <ul>
            <li><a href="/api/health">Health Check</a></li>
            <li><a href="/api/feeds/sources">RSS Sources</a></li>
            <li><a href="/api/feeds">All Feeds</a></li>
          </ul>
        </body>
        </html>
      `, {
        headers: { 'Content-Type': 'text/html' }
      })

    } catch (error) {
      console.error('Worker error:', error)
      return new Response(`Error: ${error.message}`, { 
        status: 500,
        headers: { 'Content-Type': 'text/plain' }
      })
    }
  },

  // Scheduled task to update feeds every 6 hours
  async scheduled(event, env, ctx) {
    console.log('Running scheduled feed update...')
    // ctx.waitUntil(updateFeeds(env))
  }
}

async function handleApiRequest(request, env, ctx) {
  const url = new URL(request.url)
  const path = url.pathname.replace('/api', '')

  // CORS headers
  const corsHeaders = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
    'Access-Control-Allow-Headers': 'Content-Type, Authorization',
    'Access-Control-Max-Age': '86400',
  }

  // Handle preflight requests
  if (request.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders })
  }

  try {
    switch (path) {
      case '/health':
        return new Response(JSON.stringify({ 
          status: 'ok', 
          timestamp: new Date().toISOString(),
          sources: RSS_SOURCES.length,
          message: 'Worker is healthy!'
        }), {
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        })

      case '/feeds/sources':
        return new Response(JSON.stringify(RSS_SOURCES), {
          headers: { 
            ...corsHeaders, 
            'Content-Type': 'application/json',
            'Cache-Control': 'public, max-age=3600'
          }
        })
      
      case '/feeds':
        return await getAllFeeds(env, corsHeaders)
      
      default:
        return new Response(JSON.stringify({ 
          error: 'Endpoint not found',
          available: ['/health', '/feeds/sources', '/feeds']
        }), {
          status: 404,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        })
    }
  } catch (error) {
    console.error('API error:', error)
    return new Response(JSON.stringify({ 
      error: 'Internal server error',
      message: error.message 
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    })
  }
}

async function getAllFeeds(env, corsHeaders) {
  try {
    const allFeeds = []
    const parser = new XMLParser({
      ignoreAttributes: false,
      attributeNamePrefix: '@_',
      textNodeName: 'text'
    })

    // Test with just one source for now
    const testSource = RSS_SOURCES[0]
    
    console.log('Fetching from:', testSource.url)
    
    const response = await fetch(testSource.url, {
      headers: { 
        'User-Agent': 'Harare Metro News Aggregator/1.0',
        'Accept': 'application/rss+xml, application/xml, text/xml'
      }
    })
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`)
    }

    const xmlData = await response.text()
    const jsonData = parser.parse(xmlData)
    
    // Handle different RSS structures
    const channel = jsonData?.rss?.channel || jsonData?.feed
    const items = channel?.item || channel?.entry || []
    
    const processedItems = (Array.isArray(items) ? items : [items])
      .slice(0, 5) // Just 5 for testing
      .map(item => ({
        title: item.title?.text || item.title || 'No title',
        description: cleanHtml(item.description?.text || item.description || ''),
        link: item.link?.text || item.link || '#',
        pubDate: item.pubDate || item.published || new Date().toISOString(),
        source: testSource.name,
        category: testSource.category,
        guid: item.guid?.text || item.guid || `${testSource.name}-${Date.now()}`
      }))
      .filter(item => item.title !== 'No title')

    console.log('Processed items:', processedItems.length)

    return new Response(JSON.stringify(processedItems), {
      headers: { 
        ...corsHeaders, 
        'Content-Type': 'application/json',
        'Cache-Control': 'public, max-age=900'
      }
    })

  } catch (error) {
    console.error('getAllFeeds error:', error)
    return new Response(JSON.stringify({ 
      error: 'Failed to fetch feeds',
      message: error.message,
      testData: [
        {
          title: 'Test Article',
          description: 'This is a test article to verify the API is working',
          link: 'https://example.com',
          pubDate: new Date().toISOString(),
          source: 'Test Source',
          category: 'general',
          guid: 'test-123'
        }
      ]
    }), {
      headers: { 
        ...corsHeaders, 
        'Content-Type': 'application/json'
      }
    })
  }
}

function cleanHtml(html) {
  if (typeof html !== 'string') return ''
  
  return html
    .replace(/<[^>]*>/g, '') // Remove HTML tags
    .replace(/&nbsp;/g, ' ') // Replace &nbsp; with space
    .replace(/&amp;/g, '&') // Replace &amp; with &
    .replace(/&lt;/g, '<') // Replace &lt; with <
    .replace(/&gt;/g, '>') // Replace &gt; with >
    .replace(/&quot;/g, '"') // Replace &quot; with "
    .replace(/&#39;/g, "'") // Replace &#39; with '
    .trim()
    .substring(0, 200) // Limit description length
}